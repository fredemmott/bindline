name: "Build and test"
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      compiler:
        required: true
        type: string
      experimental:
        type: boolean
        default: false
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{inputs.runs-on}}
    continue-on-error: ${{inputs.experimental}}
    steps:
      - uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 0
          submodules: true
      - name: Download Ninja
        if: inputs.os == 'windows'
        run: |
          Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip -OutFile ninja.zip
          Expand-Archive ninja.zip -DestinationPath ${{runner.temp}}
      - name: Configure
        shell: pwsh
        run: |
          New-Item -ItemType directory build
          $Args = @()
          if ("${{inputs.compiler}}" -eq "clang-cl") {
            $KitsRoot = Get-ItemPropertyValue `
              -Path "HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots" `
              -Name "KitsRoot10"
            $KitVersion = Get-ItemPropertyValue `
              -Path "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Microsoft SDKs\Windows\v10.0" `
              -Name "ProductVersion"
            $MtExe = "$KitsRoot/bin/$KitVersion.0/x64/mt.exe"
            $Args += "-DCMAKE_MT=$MtExe"
          }
          # cl.exe is not in PATH, but CMake will find it with the msbuild generator
          if ("${{inputs.compiler}}" -ne "cl") {
            $Args += "-DCMAKE_CXX_COMPILER=${{inputs.compiler}}"
          }
          if(("${{inputs.os}}" -eq "windows") -and "${{inputs.compiler}}" -ne "cl") {
            # default generator ignores CMAKE_CXX_COMPILER
            $Args += @(
              "-G",
              "Ninja",
              "-DCMAKE_MAKE_PROGRAM=${{runner.temp}}/ninja.exe"
            )
          }
          cd build
          cmake `
            ${{github.workspace}}/source `
            -DCMAKE_BUILD_TYPE=Debug `
            @args
      - name: Build
        working-directory: build
        shell: pwsh
        run: |
          cmake `
            --build . `
            --config Debug `
            --parallel
      - name: Run tests
        working-directory: build
        env:
          CLICOLOR_FORCE: 1
        run: ctest . -C Debug --output-on-failure --output-log "${{runner.temp}}/ctest.log"
      - name: Publish test log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-${{inputs.os}}-${{inputs.compiler}}-GHA${{github.run_number}}
          path: "${{runner.temp}}/ctest.log"